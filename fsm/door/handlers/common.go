// Code generated by fsm-gen. DO NOT EDIT.
// source: door.fsm

package handlers

import (
	"test/fsm"
	"test/door/types"
)

// GetHandler_EventUnlock_StateClose
func GetHandler_EventUnlock_StateClose() fsm.Handler[types.Payload] {
	return fsm.Handler[types.Payload]{
		BeforeHandler: _BeforeHandler_EventUnlock_StateClose,
		Handler:       _Handler_EventUnlock_StateClose,
		AfterHandler:  _AfterHandler_EventUnlock_StateClose,
	}
}

func _BeforeHandler_EventUnlock_StateClose(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameDoor:
		return _BeforeHandlerForDoor_EventUnlock_StateClose(f)
    case types.FSMNameSmartDoor:
		return _BeforeHandlerForSmartDoor_EventUnlock_StateClose(f)
	default:
		return nil
	}
}

func _Handler_EventUnlock_StateClose(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameDoor:
		return _HandlerForDoor_EventUnlock_StateClose(f)
    case types.FSMNameSmartDoor:
		return _HandlerForSmartDoor_EventUnlock_StateClose(f)
	default:
		return nil
	}

}

func _AfterHandler_EventUnlock_StateClose(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameDoor:
		return _AfterHandlerForDoor_EventUnlock_StateClose(f)
    case types.FSMNameSmartDoor:
		return _AfterHandlerForSmartDoor_EventUnlock_StateClose(f)
	default:
		return nil
	}
}

// GetHandler_EventLock_StateOpen
func GetHandler_EventLock_StateOpen() fsm.Handler[types.Payload] {
	return fsm.Handler[types.Payload]{
		BeforeHandler: _BeforeHandler_EventLock_StateOpen,
		Handler:       _Handler_EventLock_StateOpen,
		AfterHandler:  _AfterHandler_EventLock_StateOpen,
	}
}

func _BeforeHandler_EventLock_StateOpen(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameDoor:
		return _BeforeHandlerForDoor_EventLock_StateOpen(f)
    case types.FSMNameSmartDoor:
		return _BeforeHandlerForSmartDoor_EventLock_StateOpen(f)
	default:
		return nil
	}
}

func _Handler_EventLock_StateOpen(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameDoor:
		return _HandlerForDoor_EventLock_StateOpen(f)
    case types.FSMNameSmartDoor:
		return _HandlerForSmartDoor_EventLock_StateOpen(f)
	default:
		return nil
	}

}

func _AfterHandler_EventLock_StateOpen(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameDoor:
		return _AfterHandlerForDoor_EventLock_StateOpen(f)
    case types.FSMNameSmartDoor:
		return _AfterHandlerForSmartDoor_EventLock_StateOpen(f)
	default:
		return nil
	}
}

// GetHandler_EventUnlock_StateOpen
func GetHandler_EventUnlock_StateOpen() fsm.Handler[types.Payload] {
	return fsm.Handler[types.Payload]{
		BeforeHandler: _BeforeHandler_EventUnlock_StateOpen,
		Handler:       _Handler_EventUnlock_StateOpen,
		AfterHandler:  _AfterHandler_EventUnlock_StateOpen,
	}
}

func _BeforeHandler_EventUnlock_StateOpen(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameSmartDoor:
		return _BeforeHandlerForSmartDoor_EventUnlock_StateOpen(f)
	default:
		return nil
	}
}

func _Handler_EventUnlock_StateOpen(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameSmartDoor:
		return _HandlerForSmartDoor_EventUnlock_StateOpen(f)
	default:
		return nil
	}

}

func _AfterHandler_EventUnlock_StateOpen(f *fsm.FSM[types.Payload]) error {
	switch f.Name {
    case types.FSMNameSmartDoor:
		return _AfterHandlerForSmartDoor_EventUnlock_StateOpen(f)
	default:
		return nil
	}
}

